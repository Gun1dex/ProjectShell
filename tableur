#!/bin/sh

# Auteurs : 
#   BENOIT Baptiste
#   MONCHAUX Clément
#   SEDDAR Naïm

# L3 Informatique
# Groupe TD2 TPC

test $# -eq 0 && echo "Vérifiez les paramètres entrés. Merci." && exit 1

#echo "Instauration du shebang !"
errorMsg="Use : tableur [-in feuille] [-out resultat] [-scin sep] [-scout sep] [-slin sep] [-slout sep] [-inverse]"

ln() {
  test $# -ne 1 && echo "La fonction ln() demande 1 argument (pas plus)." && return 1
  analyseur $1
  local arg="$analyseur_resultat"
  analyseur_resultat="`echo "l($arg)" | bc -l`"
}

somme() {
  test $# -ne 2 && echo "La fonction somme() a besoin de 2 arguments. <$*>" && return 1
  local lineOfArg1=`echo "$1" | grep -o -E '[0-9]+' | head -n1`
  local colOfArg1=`echo "$1" | grep -o -E '[0-9]+' | tail -n1`
  local lineOfArg2=`echo "$2" | grep -o -E '[0-9]+' | head -n1`
  local colOfArg2=`echo "$2" | grep -o -E '[0-9]+' | tail -n1`
  local current_lineSize=`head -n$lineOfArg1 "$source" | tail -n1 | grep -o "[^$scin]*" | wc -l`
  local somme=0

  echo "<$*>"

  while test $lineOfArg1 -ne $lineOfArg2 -o $colOfArg1 -ne $colOfArg2
  do
    # take the value before moving anything
    # echo "<$lineOfArg1 | $colOfArg1>  <$lineOfArg2 | $colOfArg2>"
    getValue "l$lineOfArg1 c$colOfArg1"
    somme=`expr "$somme" + "$analyseur_resultat"`
    if test $colOfArg1 -ge $current_lineSize
    then
    echo "1"
      lineOfArg1=`expr $lineOfArg1 + 1`
      colOfArg1=1
      current_lineSize=`head -n$lineOfArg1 "$source" | tail -n1 | grep -o "[^$scin]*" | wc -l`
    else
      echo "2"
      colOfArg1=`expr $colOfArg1 + 1`
    fi
  done
  # take the very last value
  getValue "l$lineOfArg1 c$colOfArg1"

  analyseur_resultat=`expr "$somme" + "$analyseur_resultat"`
}

shell() {
  test $# -ne 1 && echo "Need one arg" && return 1
  shell_Arg=`echo $1 | tr '_' ' '`
  analyseur_resultat="`$shell_Arg`"
}

getValue() {
  local line=`echo "$1" | grep -o -E '[0-9]+' | head -n1`
  local col=`echo "$1" | grep -o -E '[0-9]+' | tail -n1`
  analyseur_resultat=`head -n"$line" "$source" | tail -n1 | cut -d"$scin" -f"$col"`
  analyseur `echo "$analyseur_resultat" | tr ' ' '_'`
}

calcul() {
  test $# -ne 3 && echo "calcul() a besoin de 3 arguments." && exit 1
  local arg1
  local arg2
  analyseur $2 
  arg1="$analyseur_resultat"
  analyseur $3
  arg2="$analyseur_resultat"

  # echo "<$arg1> <$arg2> <$*>"
  
  test $1 = "x" && analyseur_resultat=`echo "$arg1 * $arg2" | bc -l` && return 0
  test $1 = "/" -a $arg2 -eq 0 && echo "Division par 0." && exit 1
  
  analyseur_resultat=`echo "$arg1 $1 $arg2" | bc -l`
  # echo "<$analyseur_resultat>"
}

analyseur() {
  test $# -ne 1 && echo "Et j'analyse quoi moi ?" && return 1
  test -z "`echo "$1" | grep -o -e "[^[:digit:]]*"`" && analyseur_resultat="$1" && return 0
  analyseur_funName=`echo $1 | cut -d'=' -f2 | cut -d'(' -f1`
  # echo "funName : $analyseur_funName"
  # echo "arg : $1"
  # echo "<"`echo $analyseur_funName | grep -F -e "["`">"
  if test -z `echo $analyseur_funName | grep -F -e "["`
  then
    analyseur_funArg=`echo "$1" | cut -d'(' -f2- | sed 's|\(.*\)).*|\1|'`
    case $analyseur_funName in
    "shell")
      shell $analyseur_funArg;;
    "+"|"-"|"x"|"/"|"^") 
      calcul $analyseur_funName `echo "$analyseur_funArg" | tr ',' ' '`;;
    "ln") 
      ln "`echo "$analyseur_funArg" | tr ',' ' '`";;
    "somme")
      somme `echo "$analyseur_funArg" | tr ',' ' '`;;
    *) 
      analyseur_resultat=$1;;
    esac
  else
    getValue $analyseur_funName
  fi
}

#addition 1 2
#echo $add

while test $# -ge 1
do
  case $1 in
  "-in") 
    source=$2
    echo "Dans la feuille <$2>";;
  "-out")
    dest=$2 
    echo "Résultat dans <$2>";;
  "-scin") 
    scin=$2
    echo "Séparateur de col en source used <$2>";;
  "-slin")
    slin=$2 
    echo "Séparateur de ligne en source used <$2>";;
  "-scout")
    scout=$2 
    echo "Séparateur de col en dest used <$2>";;
  "-slout") 
    slout=$2
    echo "Séparateur de ligne en dest used <$2>";;
  "-inverse")
    inverse=1
    echo "Inversion des lignes et colonnes";;
  *) echo "Arg <$1 $2> non reconnue. Arrêt du script." && exit 1;;
  esac
  shift
  shift
done
echo "\n"

# les non-spécifié #
test -z $scin && scin="\t" && echo "Default -scin => <$scin>"
test -z $slin && slin="\n" && echo "Default -slin => <$slin>"
test -z $scout && scout=$scin && echo "Default -scout => <$scout>"
test -z $slout && slout=$slin && echo "Default -slout => <$slout>"
test -z $inverse && inverse=0 && echo "Default -inverse => <$inverse>"
# ---------------- #
echo "\n"
# test du fichier en arg '-in' #
if test -n $source -a -e $source
then 
  echo "On lira <$source> plus tard"
else
  echo "On lira la sortie standard"
fi

echo "Note : Le fichier '-in' doit exister pour être utiliser."
# ---------------------------- #
echo "\n"
# test du fichier en arg '-out' #
if test -n $dest -a -e $dest
then 
  echo "Le résultat sera redirigé vers <$dest>"
else
  echo "Le résultat sera affiché sur la sortie standard"
fi

echo "Note : Le fichier '-out' doit exister pour être utiliser."
# ---------------------------- #

echo "\n"

nbLine=`wc -l < $source`
destBuffer=""

#  !!! FILE/ECHO VERSION !!! #
while IFS=$slin read line
do

  for i in `echo $line | grep -o -e "[^$scin]*" | tr ' ' '_'`
  do
    if test -z `echo "$i" | grep -o -E "="`
    then
      destBuffer="$destBuffer$i"
      # echo "<$i>"
    else
      analyseur $i
      destBuffer="$destBuffer$analyseur_resultat"
    fi
    destBuffer="$destBuffer$scout"
  done
  
  # destBuffer="$destBuffer$slout"
  
  destBuffer=`echo $destBuffer | sed "s|\(.*\)$scout.*|\1|"` 
  
  destBuffer="$destBuffer$slout"
  destRes="$destRes$destBuffer"
  destBuffer=""
  # echo "<$destRes>"
  # echo "-"
done < $source
echo "$destRes" > "$dest"
destRes=`echo "$destRes" | tr '\r' '\n'`
echo "$destRes" | cat -v

echo "\nMerci d'avoir utilisé notre script ! Aurevoir !\n"
# ^^^^^^^^^^^^^^^^^^^^^^^^^^ #

# source_tmp="`cat -v "$source"`"
# echo $source_tmp

#echo "$destBuffer" | cat -v
#echo "$destBuffer" | tr -d '\r' | cat -v

# Number of cell in one line
# echo `head -n1 "$source" | tail -n1 | grep -o "[^$scin]*" | wc -l`

# Number of lines 
# echo `wc -l < $source`

# getFunName #
# echo $1 | cut -d'=' -f2 | cut -d'(' -f1

# getLine #
# head -n[lineNumber] [File] | tail -n1

# getCell #
# head -n[lineNumber] [File] | tail -n1 | cut -d'[delimiter]' -f[cellNumber]

# getCell from "l[number]c[number]" #
#line=`echo "l1c3" | grep -o -E '[0-9]+' | head -n1`
#col=`echo "l1c3" | grep -o -E '[0-9]+' | tail -n1`
#echo "line <$line> and col <$col>"

# check if fun needed #
# test -z `echo "=somme(ddnfldsn)" | grep -o -E "="`